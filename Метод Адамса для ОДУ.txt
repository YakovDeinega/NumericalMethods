import kotlin.math.*

fun f_2(k: Int, i: Int, t: Double, x: Double, y: Double): Double{
    if(k==2){
        if(i==0){
            return 2*y-x
        }
        else{
            return 4*y-3*x+exp(3*t)/(exp(2*t)+1)
        }
    }
    else if(k==3){
        if(i==0){
            return y.pow(2)-2*t*y-2*y-x
        }
        else{
            return 2*x+2*t.pow(2)+ exp(2*t-2*y)
        }
    }
    else{
        return 0.0
    }
}
fun f_3(k: Int, i: Int, t: Double, x: Double, y: Double, z: Double): Double{
    if(k==1){
        if(i==0){
            return y-2*x-2*z
        }
        else if(i==1){
            return x-2*y+2*z
        }
        else{
            return 3*x-3*y+5*z
        }
    }
    return 0.0
}
fun r_k_2(k: Int, i: Int, t: Double, x: Double, y: Double, h: Double): Double{
    var k1: Double
    var k2: Double
    var k3: Double
    var k4: Double
    if(i==0){
        k1 = f_2(k, i, t, x, y)
        k2 = f_2(k, i, t+h/2, x + (h/2)*k1,y)
        k3 = f_2(k, i,t+h/2, x + (h/2)*k2,y)
        k4 = f_2(k, i,t+h, x + (h * k3),y)
        return h*(k1+2*k2+2*k3+k4)/6+x
    }
    else if(i==1){
        k1 = f_2(k, i, t, x, y)
        k2 = f_2(k, i, t+h/2, x,y + (h/2)*k1)
        k3 = f_2(k, i,t+h/2, x,y + (h/2)*k2)
        k4 = f_2(k, i,t+h, x,y + (h * k3))
        return h*(k1+2*k2+2*k3+k4)/6+y
    }
    return 1.0
}
fun r_k_3(k: Int, i: Int, t: Double, x: Double, y: Double, z: Double, h: Double): Double{
    var k1: Double
    var k2: Double
    var k3: Double
    var k4: Double
    if(i==0){
        k1 = f_3(k, i, t, x, y, z)
        k2 = f_3(k, i, t+h/2, x + (h/2)*k1,y, z)
        k3 = f_3(k, i,t+h/2, x + (h/2)*k2,y, z)
        k4 = f_3(k, i,t+h, x + (h * k3),y,z)
        return h*(k1+2*k2+2*k3+k4)/6+x
    }
    else if(i==1){
        k1 = f_3(k, i, t, x, y,z)
        k2 = f_3(k, i, t+h/2, x,y + (h/2)*k1,z)
        k3 = f_3(k, i,t+h/2, x,y + (h/2)*k2,z)
        k4 = f_3(k, i,t+h, x,y + (h * k3),z)
        return h*(k1+2*k2+2*k3+k4)/6+y
    }
    else if(i==2){
        k1 = f_3(k, i, t, x, y,z)
        k2 = f_3(k, i, t+h/2, x,y,z + (h/2)*k1)
        k3 = f_3(k, i,t+h/2, x,y,z + (h/2)*k2)
        k4 = f_3(k, i,t+h, x,y,z + (h * k3))
        return h*(k1+2*k2+2*k3+k4)/6+z
    }
    return 1.0
}
fun adams_2(k: Int, t:MutableList<Double>, eps: Double, x0: Double, y0: Double, h: Double): Array<MutableList<Double>>{
    var y: MutableList<Double> = MutableList(0){0.0}
    var x: MutableList<Double> = MutableList(0){0.0}
    var n = t.size
    var yn_3 = y0
    var xn_3 = x0
    var xn_2 = r_k_2(k, 0, t[1],xn_3, yn_3,h)
    var yn_2 = r_k_2(k, 1, t[1], xn_3, yn_3, h)
    var xn_1 = r_k_2(k, 0, t[2],xn_2, yn_2,h)
    var yn_1 = r_k_2(k, 1, t[2], xn_2, yn_2, h)
    y.add(yn_3)
    y.add(yn_2)
    y.add(yn_1)
    x.add(xn_3)
    x.add(xn_2)
    x.add(xn_1)
    var yns1: Double
    var yns: Double
    var xns1: Double
    var xns: Double
    for (i in 3..n-1){
        xns1 = x[i-1]+h*(23*f_2(k,0, t[i-1], x[i-1], y[i-1])-16*f_2(k,0, t[i-2], x[i-2],y[i-2])+5*f_2(k, 0, t[i-3], x[i-3],y[i-3]))/12
        yns1 = y[i-1]+h*(23*f_2(k,1, t[i-1], x[i-1],y[i-1])-16*f_2(k,1, t[i-2], x[i-2],y[i-2])+5*f_2(k, 1, t[i-3], x[i-3],y[i-3]))/12
        do{
            xns = xns1
            xns1 = x[i-1] + h*(9*f_2(k,0, t[i], xns,yns1)+19*f_2(k,0, t[i-1], x[i-1],y[i-1])-5*f_2(k,0, t[i-2], x[i-2],y[i-2])+f_2(k,0, t[i-3], x[i-3],y[i-3]))/24
        } while(abs(xns1-xns)>eps)
        x.add(xns1)
        do{
            yns = yns1
            yns1 = y[i-1] + h*(9*f_2(k,1, t[i], xns1,yns)+19*f_2(k,1, t[i-1], x[i-1],y[i-1])-5*f_2(k,1, t[i-2], x[i-2],y[i-2])+f_2(k,1, t[i-3], x[i-3],y[i-3]))/24
        }while(abs(yns1-yns)>eps)
        y.add(yns1)
    }
    return arrayOf(x,y)
}
fun adams_3(k: Int, t:MutableList<Double>, eps: Double, x0: Double, y0: Double, z0:Double, h: Double): Array<MutableList<Double>>{
    var y: MutableList<Double> = MutableList(0){0.0}
    var x: MutableList<Double> = MutableList(0){0.0}
    var z: MutableList<Double> = MutableList(0){0.0}
    var n = t.size
    var yn_3 = y0
    var xn_3 = x0
    var zn_3 = z0
    var xn_2 = r_k_3(k, 0, t[1],xn_3, yn_3, zn_3, h)
    var yn_2 = r_k_3(k, 1, t[1], xn_3, yn_3, zn_3, h)
    var zn_2 = r_k_3(k, 2, t[1], xn_3, yn_3, zn_3, h)
    var xn_1 = r_k_3(k, 0, t[2],xn_2, yn_2, zn_2, h)
    var yn_1 = r_k_3(k, 1, t[2], xn_2, yn_2, zn_2, h)
    var zn_1 = r_k_3(k, 2, t[2], xn_2, yn_2, zn_2, h)
    y.add(yn_3)
    y.add(yn_2)
    y.add(yn_1)
    x.add(xn_3)
    x.add(xn_2)
    x.add(xn_1)
    z.add(zn_3)
    z.add(zn_2)
    z.add(zn_1)
    var yns1: Double
    var yns: Double
    var xns1: Double
    var xns: Double
    var zns1: Double
    var zns: Double
    for (i in 3..n-1){
        xns1 = x[i-1]+h*(23*f_3(k,0, t[i-1], x[i-1], y[i-1], z[i-1])-16*f_3(k,0, t[i-2], x[i-2],y[i-2], z[i-2])+5*f_3(k, 0, t[i-3], x[i-3],y[i-3], z[i-3]))/12
        yns1 = y[i-1]+h*(23*f_3(k,1, t[i-1], x[i-1],y[i-1], z[i-1])-16*f_3(k,1, t[i-2], x[i-2],y[i-2],z[i-2])+5*f_3(k, 1, t[i-3], x[i-3],y[i-3],z[i-3]))/12
        zns1 = z[i-1]+h*(23*f_3(k,2, t[i-1], x[i-1],y[i-1], z[i-1])-16*f_3(k,2, t[i-2], x[i-2],y[i-2],z[i-2])+5*f_3(k, 2, t[i-3], x[i-3],y[i-3],z[i-3]))/12
        do{
            xns = xns1
            xns1 = x[i-1] + h*(9*f_3(k,0, t[i], xns,yns1,zns1)+19*f_3(k,0, t[i-1], x[i-1],y[i-1],z[i-1])-5*f_3(k,0, t[i-2], x[i-2],y[i-2],z[i-2])+f_3(k,0, t[i-3], x[i-3],y[i-3],z[i-3]))/24
        } while(abs(xns1-xns)>eps)
        x.add(xns1)
        do{
            yns = yns1
            yns1 = y[i-1] + h*(9*f_3(k,1, t[i], xns1,yns,zns1)+19*f_3(k,1, t[i-1], x[i-1],y[i-1],z[i-1])-5*f_3(k,1, t[i-2], x[i-2],y[i-2],z[i-2])+f_3(k,1, t[i-3], x[i-3],y[i-3],z[i-3]))/24
        } while(abs(yns1-yns)>eps)
        y.add(yns1)
        do{
            zns = zns1
            zns1 = z[i-1] + h*(9*f_3(k,2, t[i], xns1,yns1,zns)+19*f_3(k,2, t[i-1], x[i-1],y[i-1],z[i-1])-5*f_3(k,2, t[i-2], x[i-2],y[i-2],z[i-2])+f_3(k,2, t[i-3], x[i-3],y[i-3],z[i-3]))/24
        } while(abs(zns1-zns)>eps)
        z.add(zns1)
    }
    return arrayOf(x,y,z)
}
fun main(){
    var example = 3
    var example_type = 2
    var t: MutableList<Double>
    var x0: Double
    var y0: Double
    var z0: Double=0.0
    var a: Double
    var b: Double
    var eps: Double=1e-6
    var h: Double
    if(example==1){
        a=0.0
        b=3.0
        x0=3.0
        y0=1.0
        z0=-3.0
        if(example_type==1)
            h=0.05
        else
            h=0.1
    }
    else if(example==2){
        a=0.0
        b=3.0
        x0=3.87765
        y0=5.66305
        if(example_type==1)
            h=0.1
        else
            h=0.2
    }
    else{
        a=0.0
        b=10.0
        x0=0.0
        y0=0.0
        if(example_type==1){
            h=0.1
        }
        else
            h=0.2
    }
    t= MutableList(1){a}
    for (i in 1..((b-a)/h).toInt()){
        t.add(t[i-1]+h)
    }
    if(example==1){
        var ans = adams_3(example, t, eps, x0, y0, z0, h)
        var x = ans[0]
        var y = ans[1]
        var z=ans[2]
        for (i in 0..y.size-1){
            println(z[i])
        }
    }
    else{
        var ans = adams_2(example, t, eps, x0, y0, h)
        var x = ans[0]
        var y = ans[1]
        for (i in 0..y.size-1){
            println(x[i])
        }
    }
}